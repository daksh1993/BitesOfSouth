// src/LoginModal.js
import React, { useState } from 'react';
import { auth, db } from './firebase';
import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword, 
  signInWithPopup, 
  GoogleAuthProvider,
  updateProfile 
} from 'firebase/auth';
import { setDoc, doc, addDoc, collection, serverTimestamp } from 'firebase/firestore';
import './LoginModal.css';

const LoginModal = ({ isOpen, onClose }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phoneNo, setPhoneNo] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState(null);
  const [isRegistering, setIsRegistering] = useState(false);

  if (!isOpen) return null;

  // Helper function to log authentication events to Firestore under "clients"
  const logAuthEvent = async (clientId, eventType) => {
    try {
      // === DATA GOING TO FIRESTORE ===
      // Path: clients/<clientId>/authEvents/<auto-generated-id>
      // Data stored: { type: eventType (e.g., "login", "register", "google_login"), timestamp: serverTimestamp }
      await addDoc(collection(db, "clients", clientId, "authEvents"), {
        type: eventType,
        timestamp: serverTimestamp()
      });
    } catch (err) {
      console.error("Error logging auth event:", err);
    }
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      // === DATA GOING TO FIRESTORE ===
      // Path: clients/<user.uid>/authEvents/<auto-generated-id>
      // Data stored: { type: "login", timestamp: serverTimestamp }
      await logAuthEvent(user.uid, "login");
      setEmail('');
      setPassword('');
      onClose();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      setError("Passwords do not match");
      return;
    }
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      await updateProfile(user, { displayName: name });
      // === DATA GOING TO FIRESTORE (Client Profile) ===
      // Path: clients/<user.uid>
      // Data stored: { name, email, phoneNo, createdAt: serverTimestamp }
      await setDoc(doc(db, "clients", user.uid), {
        name,
        email,
        phoneNo,
        createdAt: serverTimestamp()
      });
      // === DATA GOING TO FIRESTORE (Auth Event) ===
      // Path: clients/<user.uid>/authEvents/<auto-generated-id>
      // Data stored: { type: "register", timestamp: serverTimestamp }
      await logAuthEvent(user.uid, "register");
      setName('');
      setEmail('');
      setPhoneNo('');
      setPassword('');
      setConfirmPassword('');
      onClose();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleGoogleSignIn = async () => {
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      // === DATA GOING TO FIRESTORE (Client Profile) ===
      // Path: clients/<user.uid>
      // Data stored: { name: user.displayName, email: user.email, phoneNo: "", createdAt: serverTimestamp }
      // Note: Uses merge: true to avoid overwriting existing data
      await setDoc(doc(db, "clients", user.uid), {
        name: user.displayName,
        email: user.email,
        phoneNo: '',
        createdAt: serverTimestamp()
      }, { merge: true });
      // === DATA GOING TO FIRESTORE (Auth Event) ===
      // Path: clients/<user.uid>/authEvents/<auto-generated-id>
      // Data stored: { type: "google_login", timestamp: serverTimestamp }
      await logAuthEvent(user.uid, "google_login");
      onClose();
    } catch (err) {
      setError(err.message);
    }
  };

  const toggleMode = () => {
    setIsRegistering(!isRegistering);
    setError(null);
    setName('');
    setEmail('');
    setPhoneNo('');
    setPassword('');
    setConfirmPassword('');
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <button className="modal-close-btn" onClick={onClose}>Ã—</button>
        <h2>{isRegistering ? 'Register' : 'Sign In'}</h2>
        <form onSubmit={isRegistering ? handleRegister : handleLogin}>
          {isRegistering && (
            <div className="form-group">
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Full Name"
                required
              />
            </div>
          )}
          <div className="form-group">
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
            />
          </div>
          {isRegistering && (
            <div className="form-group">
              <input
                type="tel"
                value={phoneNo}
                onChange={(e) => setPhoneNo(e.target.value)}
                placeholder="Phone Number"
                required
                pattern="[0-9]{10}"
                title="Please enter a 10-digit phone number"
              />
            </div>
          )}
          <div className="form-group">
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
            />
          </div>
          {isRegistering && (
            <div className="form-group">
              <input
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="Confirm Password"
                required
              />
            </div>
          )}
          {error && <p className="error-message">{error}</p>}
          <button type="submit" className="login-btn">
            {isRegistering ? 'Register' : 'Login'}
          </button>
        </form>

        {!isRegistering && (
          <button className="google-btn" onClick={handleGoogleSignIn}>
            <i className="fab fa-google"></i> Sign in with Google
          </button>
        )}

        <p className="toggle-text">
          {isRegistering ? 'Already have an account?' : "Don't have an account?"}
          <span className="toggle-link" onClick={toggleMode}>
            {isRegistering ? ' Sign In' : ' Register'}
          </span>
        </p>
      </div>
    </div>
  );
};

export default LoginModal;